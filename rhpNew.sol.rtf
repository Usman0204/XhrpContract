pragma experimental ABIEncoderV2;
pragma solidity ^0.6.12;
// SPDX-License-Identifier: MIT


/**
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */
 
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts with custom message when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}


/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts
        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned
        // for accounts without code, i.e. `keccak256('')`
        bytes32 codehash;
        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
        // solhint-disable-next-line no-inline-assembly
        assembly { codehash := extcodehash(account) }
        return (codehash != accountHash && codehash != 0x0);
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain`call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
      return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return _functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        return _functionCallWithValue(target, data, value, errorMessage);
    }

    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
        require(isContract(target), "Address: call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                // solhint-disable-next-line no-inline-assembly
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    
    constructor () internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }
  
    function owner() public view virtual returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }
    /*
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }
    /*
     * @dev Transfers ownership of the contract to a new account (newOwner).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}


interface IERC20 {

    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

abstract contract constructorLibrary {
    struct parameter{
        string nameOfProject; uint256 _saleStartTime; uint256 _saleEndTime; address payable _projectOwner;
        address tokenToIDO; uint256 tokenDecimals; uint256 _numberOfIdoTokensToSell; uint256 _tokenPriceInBNB;
        uint256 maxAllocaPerUser; uint256 minAllocaPerUser;
        uint256 _firstIterationPercentage; uint256 _secondIterationPercentage; uint256 _thirdIterationPercentage;
        uint256 _firstClaimTime; uint256 _secondClaimTime; uint256 _thirdClaimTime;
    }
}

contract RCLaunchPad is Ownable, constructorLibrary {
  using SafeMath for uint256;

  //token attributes
  string public NAME_OF_PROJECT; //name of the contract
  
  IERC20 public token;          //token to do IDO of

  uint256 public maxCap; // Max cap in BNB       //18 decimals
  uint256 public softCap; // softcap if not reached IDO Fails 

  uint256 public numberOfIdoTokensToSell;         //18 decimals

  uint256 public tokenPriceInBNB;                 //18 decimals

  uint256 public immutable saleStartTime; // start sale time
  uint256 public immutable saleEndTime; // end sale time

  uint256 public totalBnbReceived; // total bnb received

  address payable public projectOwner; // project Owner
  
  //max allocations per user
  uint256 public maxAllocaPerUser;

  //min allocations per user
  uint256 public minAllocaPerUser;

  //mapping the user purchase
  mapping(address => uint256) public buyByUser;

  bool public successIDO = false;
  bool public failedIDO = false;

  bool public tokensCollected = false;
  
  address public tokenSender;    // the owner who sends the token in the contract

  bool public idoTokensDeposited = false;           //check if tokens to IDO is deposited before distribution

  uint256 public decimals;              //decimals of the IDO token

  bool public finalizedDone = false;        //check if sale is finalized and both bnb and tokens locked in contract to distribute afterwards

  mapping (address => bool) public alreadyClaimed;
  mapping (address => bool) public alreadyClaimedVested;
  mapping (address => bool) public alreadyClaimedSecondVested;

  uint256 public firstIterationPercentage;
  uint256 public secondIterationPercentage;
  uint256 public thirdIterationPercentage;

  uint256 public firstClaimTime;       
  uint256 public secondClaimTime;
  uint256 public thirdClaimTime;

  // CONSTRUCTOR  
  constructor(
      parameter memory p
  ) public {

    NAME_OF_PROJECT = p.nameOfProject;                        // name of the project to do IDO of

    token = IERC20(p.tokenToIDO);                             //token to ido

    decimals = p.tokenDecimals;                               //decimals of ido token (no decimals)

    numberOfIdoTokensToSell = p._numberOfIdoTokensToSell;       //No decimals

    tokenPriceInBNB = p._tokenPriceInBNB;                       //18 decimals 

    maxCap = numberOfIdoTokensToSell * tokenPriceInBNB;       //18 decimals

    saleStartTime = p._saleStartTime;                           //main sale start time

    saleEndTime = p._saleEndTime;                               //main sale end time

    projectOwner = p._projectOwner;

    //give values in wei amount 18 decimals BNB
    maxAllocaPerUser = p.maxAllocaPerUser;
    
    //give values in wei amount 18 decimals BNB
    minAllocaPerUser= p.minAllocaPerUser;

    softCap = maxCap.div(100).mul(5);

    firstIterationPercentage = p._firstIterationPercentage;
    secondIterationPercentage = p._secondIterationPercentage;
    thirdIterationPercentage = p._thirdIterationPercentage;

    firstClaimTime = p._saleEndTime + p._firstClaimTime;
    secondClaimTime = firstClaimTime + p._secondClaimTime;
    thirdClaimTime = secondClaimTime + p._thirdClaimTime;

  }

    function changeMinimumAllocation(uint256 newAllocation) public onlyOwner returns (uint256) {
        minAllocaPerUser = newAllocation * (1 ether);
        return newAllocation;
    }

    function changeMaximumAllocation(uint256 newAllocation) public onlyOwner returns (uint256) {
        maxAllocaPerUser = newAllocation * (1 ether);
        return newAllocation;
    }


    function updateFirstClaimTime(uint256 epochTime) public onlyOwner returns (uint256) {
        require(epochTime > saleEndTime, "Cannot set time to before sale time");
        firstClaimTime = epochTime;
        return firstClaimTime;
    }

    function updateSecondClaimTime(uint256 epochTime) public onlyOwner returns (uint256) {
        require(epochTime > saleEndTime, "Cannot set time to before sale time");
        secondClaimTime = epochTime;
        return secondClaimTime;
    }

    function updateThirdClaimTime(uint256 epochTime) public onlyOwner returns (uint256) {
        require(epochTime > saleEndTime, "Cannot set time to before sale time");
        thirdClaimTime = epochTime;
        return thirdClaimTime;
    }


  // function to update the tiers value manually
  function updateMaxCap(uint256 newMaxCap) external onlyOwner {
    maxCap = newMaxCap;
    softCap = maxCap.div(100).mul(5);
  }
  
    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

  receive() external payable {          // if BNB is sent to contract participateAndPay() function to run to participate
    participateAndPay();
  }


  //send bnb to the contract address
  //used to participate in the public sale according to your tier 
  //main logic of IDO called and implemented here
  function participateAndPay() public payable {

    require(now >= saleStartTime, "The sale is not started yet "); // solhint-disable
    require(now <= saleEndTime, "The sale is closed"); // solhint-disable
    require(totalBnbReceived.add(msg.value) <= maxCap, "buyTokens: purchase would exceed max cap");
    require(buyByUser[msg.sender].add(msg.value) <= maxAllocaPerUser ,"buyTokens:You are investing more than your limit!");
    require(buyByUser[msg.sender].add(msg.value) >= minAllocaPerUser ,"buyTokens:You are investing less than your limit!");
    buyByUser[msg.sender] = buyByUser[msg.sender].add(msg.value);
    totalBnbReceived = totalBnbReceived.add(msg.value);

  }

    function finalizeSale() public onlyOwner{
        require(now > saleEndTime, 'The Sale is still ongoing and finalization of results cannot be done');
        require(idoTokensDeposited == true, 'No IDO tokens have been added to the contract kindly send tokens by running function getTokensFromAccount(sender)');
        require(finalizedDone == false, 'Alread Sale has Been Finalized');

        if(totalBnbReceived > softCap){
            //allow tokens to be claimable
            // send bnb to investor or the owner
            // success IDO use case
            successIDO = true;
            failedIDO = false;

            // TODO: fix this for new logic
            uint256 toReturn = maxCap.sub(totalBnbReceived);
            toReturn = toReturn.div(tokenPriceInBNB);


            token.transfer(tokenSender, toReturn.mul(10 ** (decimals)) );  //converting to 9 decimals from 18 decimals //extra tokens

            sendValue( projectOwner, address(this).balance );     //sending amount spent by user to projectOwner wallet

            finalizedDone = true;
        }
        else{
            //allow bnb to be claimed back
            // send tokens back to token owner
            //failed IDO use case
            successIDO = false;
            failedIDO = true;

            uint256 toReturn = token.balanceOf(address(this));
            token.transfer(tokenSender, toReturn);  //converting to 9 decimals from 18 decimals             

            finalizedDone = true;
        }
    }


    function getTokensFromAccount(address sender) public onlyOwner returns (uint256){
        
        require( idoTokensDeposited == false, 'Tokens already deposited not needed to deposit again');
        
        // token.transferFrom(sender, address(this), numberOfIdoTokensToSell.mul(10 ** (18-decimals) ));      //converting to 9 decimals from 18 decimals 
        tokenSender = sender;
        idoTokensDeposited = true;

        uint256 toReturn = numberOfIdoTokensToSell.mul(10 ** (18 - decimals));

        return toReturn;
    }


    function claimTokens() public {                 
        require(now > saleEndTime, 'First Claim Vesting Period Active will open after specified minutes of saleEndTime');
        require(now > firstClaimTime, 'First Claim Vesting Period Active will open after firstClaimTime has elapsed');
        require(finalizedDone == true, 'The Sale has not been finalized. First finalize the sale to enable claiming of tokens');

        require(alreadyClaimed[msg.sender] == false, 'Cannot Claim more than once. You have already claimed tokens');
        uint256 amountSpent = buyByUser[msg.sender];

        if(amountSpent == 0){
          revert('You have not participated hence cannot claim tokens');
        }

        if(successIDO == true && failedIDO == false){
            //success case
            //send token according to rate*amountspend
            //TODO: fix this for new logic
            uint256 toSend = amountSpent.div(tokenPriceInBNB).mul(firstIterationPercentage).div(100);                      //only first iteration percentage tokens to distribute rest are vested
            token.transfer(msg.sender, toSend.mul(10 ** (decimals)) ); //converting to 9 decimals from 18 decimals 
            //send bnb to wallet
            // sendValue(projectOwner, amountSpent);     //sending amount spent by user to projectOwner wallet
            alreadyClaimed[msg.sender] = true;
        }
        if(successIDO == false && failedIDO == true){
            //failure case
            //send bnb back as amountSpent
            sendValue(msg.sender, amountSpent);

            // uint256 toSend = amountSpent.div(tokenPriceInBNB);
            //send tokens back to projectOwner
            // token.transfer(tokenSender, toSend.mul(10 ** (decimals)) );  //converting to 9 decimals from 18 decimals 
            alreadyClaimed[msg.sender] = true;
        }

    }

    function claimVestedTokens() public {

        require(now > saleEndTime, 'The Sale is still ongoing and claiming of tokens cannot be done');
        require(now > secondClaimTime, 'Second Claim Vesting Period Active will open after secondClaimTime has elapsed');
        require(finalizedDone == true, 'The Sale has not been finalized. First finalize the sale to enable claiming of tokens');

        require(alreadyClaimed[msg.sender] == true, 'First Claimed should be done before claiming this');
        require(alreadyClaimedVested[msg.sender] == false, 'Cannot Claim more than once. You have already claimed tokens');
        uint256 amountSpent = buyByUser[msg.sender];

        if(amountSpent == 0){
          revert('You have not participated hence cannot claim tokens');
        }

        if(successIDO == true && failedIDO == false){
            //success case
            //send token according to rate*amountspend
            uint256 toSend = amountSpent.div(tokenPriceInBNB).mul(secondIterationPercentage).div(100);  //sending rest secondIteration percentage tokens that were vested
            token.transfer(msg.sender, toSend.mul(10 ** (decimals)) ); //converting to 9 decimals from 18 decimals 
            alreadyClaimedVested[msg.sender] = true;
        }
        
    }

    function claimSecondVestedTokens() public {

        require(now > saleEndTime, 'The Sale is still ongoing and claiming of tokens cannot be done');
        require(now > thirdClaimTime, 'Third Claim Vesting Period Active will open after thirdClaimTime has elapsed');
        require(finalizedDone == true, 'The Sale has not been finalized. First finalize the sale to enable claiming of tokens');

        require(alreadyClaimed[msg.sender] == true, 'First Claimed should be done before claiming this');
        require(alreadyClaimedVested[msg.sender] == true, 'Second Claimed should be done before claiming this');
        require(alreadyClaimedSecondVested[msg.sender] == false, 'Cannot Claim more than once. You have already claimed tokens');
        uint256 amountSpent = buyByUser[msg.sender];

        if(amountSpent == 0){
          revert('You have not participated hence cannot claim tokens');
        }

        if(successIDO == true && failedIDO == false){
            //success case
            //send token according to rate*amountspend
            uint256 toSend = amountSpent.div(tokenPriceInBNB).mul(thirdIterationPercentage).div(100);  //sending rest secondIteration percentage tokens that were vested
            token.transfer(msg.sender, toSend.mul(10 ** (decimals)) ); //converting to 9 decimals from 18 decimals 
            alreadyClaimedSecondVested[msg.sender] = true;
        }
    }

    function setTokenSenderAddress(address _tokenSender) public onlyOwner {
        tokenSender = _tokenSender;
    }

    function withdrawTokensEmergency(address recipient,uint256 amount) public onlyOwner{
        token.transfer(recipient, amount);
    }

    function withdrawBNBEmergency() public onlyOwner {                  // only for testing purposes
        sendValue( payable(owner()), address(this).balance);
    }

}

contract RCLaunchPadDeployer is Ownable, constructorLibrary{

    address[] public contractAddresses;
    string[] public contractNames;

    constructor () public {

    }

    function deployProjectOnLaunchpad(parameter memory params) public onlyOwner returns(address) {

        RCLaunchPad deploy = new RCLaunchPad(params);
        contractAddresses.push( address(deploy) );
        contractNames.push( params.nameOfProject );
        return address(deploy);
    }

    function getProject(uint256 index) public view returns (string memory, address) {
        return (contractNames[index], contractAddresses[index]);
    }

    function getRecentProject() public view returns (string memory, address) {
        return (contractNames[contractNames.length - 1], contractAddresses[contractAddresses.length - 1]);
    }

}